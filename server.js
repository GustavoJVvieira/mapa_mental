// ====================================================================
// server.js (Backend Node.js + Express)
// ====================================================================
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { GoogleGenAI } = require('@google/genai');

// Use a chave API do Gemini a partir das vari√°veis de ambiente
const gemini = new GoogleGenAI("AIzaSyBvqBe5dKexHUXJcHdqAHaYimKBuEN1nKc");

const app = express();
const PORT = 3000;

// Configura√ß√µes
app.use(cors()); // Permite que o frontend em outra porta (ou arquivo local) se comunique
app.use(express.json()); // Habilita o parsing de JSON no corpo das requisi√ß√µes

// Fun√ß√£o principal de comunica√ß√£o com o Gemini
async function generateMindMapText(rawText) {
    const prompt = `
        Voc√™ √© um gerador de estrutura de mapa mental. Sua tarefa √© analisar o texto abaixo e convert√™-lo em uma estrutura hier√°rquica usando um formato de texto estrito.

        Regras do Formato de Sa√≠da (MUITO IMPORTANTE - Responda APENAS com este formato):
        1. A estrutura deve come√ßar com: [ideia central:] <T√≠tulo da Ideia Central>
        2. Cada n√≥ principal (Box) deve usar: [box X.] <T√≠tulo do Box> (onde X √© o n√∫mero do box)
        3. Cada subt√≥pico deve usar: subt√≥pico Y - <T√≠tulo do Subt√≥pico> (onde Y √© o n√∫mero sequencial)
        4. Cada sub-subt√≥pico deve usar: subt√≥pico Y.Z - <T√≠tulo do Sub-Subt√≥pico> (onde Y √© o n√∫mero do subt√≥pico pai e Z √© o n√∫mero sequencial)
        5. Para for√ßar uma quebra de linha dentro de um t√≠tulo (Subt√≥pico ou Sub-subt√≥pico), use o caractere '|' (pipe).
        6. N√£o inclua nenhuma outra explica√ß√£o, introdu√ß√£o ou formata√ß√£o (como Markdown ) na sua resposta. APENAS o texto puro da estrutura.

        Texto para an√°lise:
        ---
        ${rawText}
        ---

        Exemplo de Sa√≠da Esperada (APENAS o texto da estrutura, sem aspas ou ):
        [ideia central:] Exemplo de Estrutura
        [box 1.] N√≠vel Principal 1
        subt√≥pico 1 - Primeiro T√≥pico | com quebra de linha
        subt√≥pico 1.1 - Detalhe 1.1
        subt√≥pico 2 - Segundo T√≥pico
        [box 2.] N√≠vel Principal 2
        subt√≥pico 1 - T√≥pico Secund√°rio
    `;

    try {
        const response = await gemini.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                // For√ßa o modelo a seguir o formato de texto
                temperature: 0.0,
                maxOutputTokens: 2048,
            }
        });

        // O resultado deve ser o texto puro da estrutura do mapa mental
        const generatedText = response.text.trim();

        if (!generatedText.startsWith('[ideia central:]')) {
             throw new Error("Resposta do modelo n√£o est√° no formato de mapa mental esperado.");
        }

        return generatedText;

    } catch (error) {
        console.error("Erro ao comunicar com a API do Gemini:", error);
        throw new Error(`Falha na gera√ß√£o do mapa: ${error.message}`);
    }
}

// Endpoint para gerar o mapa mental
app.post('/generate-map', async (req, res) => {
    const { text } = req.body;

    if (!text) {
        return res.status(400).json({ error: "O campo 'text' √© obrigat√≥rio." });
    }

    try {
        const mapText = await generateMindMapText(text);
        res.json({ generatedMapText: mapText });
    } catch (error) {
        res.status(500).json({ error: error.message || "Erro interno do servidor." });
    }
});

app.listen(PORT, () => {
    console.log(`üöÄ Backend rodando em http://localhost:${PORT}`);
    console.log("Certifique-se de que a vari√°vel GEMINI_API_KEY est√° configurada.");
});